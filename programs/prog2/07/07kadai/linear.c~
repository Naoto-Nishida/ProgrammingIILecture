#include <stdio.h>
#include <stdlib.h>
#include "headerB.h"


int LoadLinearSystem(const char *filename, Matrix *A, Vector *b){
  FILE *fp;
  int _rows, _cols;
  int i, j;
  int gomi; //for fscanf("\n");

  if ((fp = fopen(filename, "r")) == NULL) {
    printf("file open error!!\n");
    return 0;
  }

  
  fscanf(fp, "%d %d\n", &_rows, &_cols);
  printf("LoadLinerSystem: matrix size: %dx%d\n\n", _rows, _cols);

  AllocateMatrix(A, _rows, _cols);
  AllocateVector(b, _cols);
/*
  for(i = 0; i<(_rows)*(_cols); i++){
    *(A->elems+i) = 0;
  }*/

  for(i=0; i<_rows; i++){
    for(j=0; j<_cols; j++){
      fscanf(fp, "%lf ", (A->elems+i*_cols+j));
     // fseek(fp, 1, SEEK_CUR);
    }
     // fseek(fp, 1, SEEK_CUR);
      //fscanf(fp, "%lf", (A->elems+i+j));
    //fscanf(fp, "\n", (&gomi));
  }
  for(j=0; j<_cols; j++){
    fscanf(fp, "%lf ", (b->elems+j));
  }

  return 1;
  
}

int SolveGaussJordan(Matrix *A, Vector *b){
  int _rows = A->rows;
  int _cols = A->cols;
  int i, j, k;

  for(i=0; i<_rows; i++){

    // deviding the i-th row's components
    for(j=i; j<_cols;j++){
      
      *(A->elems+i*_cols+j) /= *(A->elems+i*_cols+i);
    }
    *(b->elems + i) /= *(A->elems+i*_cols+i);

    // multipy and substraction
    /*
    for(k=i+1; k<_rows; k++){
      for(j=0;j<_cols;j++){
	*(A->elems+ k*_cols + j) = *(A->elems + k*_cols+ j) - (*(A->elems + k*_cols))*(*(A->elems + i*_cols + j));
      }
      *(b->elems + k) -= (*(b->elems + i))*(*(A->elems + k*_cols));
      }*/

    for(k = 0; k < _rows; k++){
      if(k != i){
	for(j=0; j<_cols; j++){
	  *(A->elems+ k*_cols + j) = *(A->elems + k*_cols+ j) - (*(A->elems + k*_cols + i))*(*(A->elems + i*_cols + j));
	}
	*(b->elems + k) -= (*(b->elems + i))*(*(A->elems + k*_cols + i));
      }
    }
	

    //to judge whether the row or col are 0
    if(*(A->elems + (i+1)*_cols + (i+1)) == 0){
      printf("\ndiagonal matrix is zero...\n");
      return 0;
    }
  }

  return 1;
}
